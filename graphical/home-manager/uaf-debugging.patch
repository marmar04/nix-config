diff --git a/CMakeLists.txt b/CMakeLists.txt
index 64e3c51..7f305b3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,6 +3,8 @@ project(Hy3 VERSION "0.1")
 set(CMAKE_CXX_STANDARD 23)
 add_compile_definitions(WLR_USE_UNSTABLE)
 add_compile_options(-Wall -Wextra -Wno-unused-parameter -Wno-unused-value -Wno-missing-field-initializers -Wno-narrowing -Wno-pointer-arith)
+#add_compile_options(-lasan -fsanitize=address -fno-omit-frame-pointer -static-libasan)
+#add_link_options(-fsanitize=address)
 
 # nix workaround
 if(CMAKE_EXPORT_COMPILE_COMMANDS)
diff --git a/src/Hy3Layout.cpp b/src/Hy3Layout.cpp
index 3fbb063..2d864ea 100644
--- a/src/Hy3Layout.cpp
+++ b/src/Hy3Layout.cpp
@@ -223,6 +223,7 @@ void Hy3Node::markFocused() {
 	}
 
 	while (node->parent != nullptr) {
+		Debug::log(LOG, "* UAF DEBUGGING - Set %p's lastFocusedChild to %p at %s:%d", node->parent, node, __FILE__, __LINE__);
 		node->parent->data.as_group.lastFocusedChild = node;
 		node = node->parent;
 	}
@@ -285,6 +286,7 @@ bool Hy3Node::swallowGroups(Hy3Node* into) {
 
 	Debug::log(LOG, "Swallowing %p into %p", child, into);
 	Hy3Node::swapData(*into, *child);
+	Debug::log(LOG, "* UAF DEBUGGING - Removed %p at %s:%d", child, __FILE__, __LINE__);
 	into->layout->nodes.remove(*child);
 
 	return true;
@@ -310,6 +312,7 @@ Hy3Node* Hy3Node::removeFromParentRecursive() {
 
 		auto* child = parent;
 		parent = parent->parent;
+		Debug::log(LOG, "- removing %p from %p", child, parent);
 		auto& group = parent->data.as_group;
 
 		if (group.children.size() > 2) {
@@ -322,6 +325,11 @@ Hy3Node* Hy3Node::removeFromParentRecursive() {
 			}
 		}
 
+		Debug::log(ERR, "* UAF DEBUGGING - Listing %p's children pre-remove", parent);
+		for (auto* child: group.children) {
+			Debug::log(LOG, " - %p", child);
+		}
+
 		if (!group.children.remove(child)) {
 			Debug::log(ERR, "Was unable to remove child node %p from parent %p. Child likely has a false parent pointer.", child, parent);
 			errorNotif();
@@ -332,13 +340,21 @@ Hy3Node* Hy3Node::removeFromParentRecursive() {
 			group.lastFocusedChild = group.children.front();
 		}
 
+		Debug::log(ERR, "* UAF DEBUGGING - Listing %p's children post-remove", parent);
+		for (auto* child: group.children) {
+			Debug::log(LOG, " - %p", child);
+		}
+
 		if (child != this) {
+			Debug::log(LOG, "* UAF DEBUGGING - Removed %p at %s:%d", child, __FILE__, __LINE__);
 			parent->layout->nodes.remove(*child);
 		} else {
+			Debug::log(LOG, "* UAF DEBUGGING - set %p's parent pointer to null as it was removed from its parent");
 			child->parent = nullptr;
 		}
 
 		if (!group.children.empty()) {
+			Debug::log(LOG, "* UAF DEBUGGING - breaking at %p as it still has children (last focused %p) %s:%d", parent, group.lastFocusedChild, __FILE__, __LINE__);
 			auto splitmod = -((1.0 - child->size_ratio) / group.children.size());
 
 			for (auto* child: group.children) {
@@ -347,6 +363,8 @@ Hy3Node* Hy3Node::removeFromParentRecursive() {
 
 			break;
 		}
+
+		Debug::log(LOG, "* UAF DEBUGGING - Set %p's lastFocusedChild to %p at %s:%d", parent, group.lastFocusedChild, __FILE__, __LINE__);
 	}
 
 	return parent;
@@ -372,12 +390,14 @@ void Hy3Node::swapData(Hy3Node& a, Hy3Node& b) {
 
 	if (a.data.type == Hy3NodeData::Group) {
 		for (auto child: a.data.as_group.children) {
+			Debug::log(LOG, "* UAF DEBUGGING - Set %p's parent to %p at %s:%d", child, child->parent, __FILE__, __LINE__);
 			child->parent = &a;
 		}
 	}
 
 	if (b.data.type == Hy3NodeData::Group) {
 		for (auto child: b.data.as_group.children) {
+			Debug::log(LOG, "* UAF DEBUGGING - Set %p's parent to %p at %s:%d", child, child->parent, __FILE__, __LINE__);
 			child->parent = &b;
 		}
 	}
@@ -627,6 +647,7 @@ void Hy3Layout::onWindowRemovedTiling(CWindow* window) {
 	}
 
 	auto* parent = node->removeFromParentRecursive();
+	Debug::log(LOG, "* UAF DEBUGGING - Removed %p at %s:%d", node, __FILE__, __LINE__);
 	this->nodes.remove(*node);
 
 	if (parent != nullptr) {
@@ -1079,6 +1100,7 @@ void Hy3Layout::makeGroupOn(int workspace, Hy3GroupLayout layout) {
 	node->data = layout;
 	node->data.as_group.children.push_back(&this->nodes.back());
 	node->data.as_group.lastFocusedChild = &this->nodes.back();
+	Debug::log(LOG, "* UAF DEBUGGING - Set %p's lastFocusedChild to %p at %s:%d", node, node->data.as_group.lastFocusedChild, __FILE__, __LINE__);
 	node->recalcSizePosRecursive();
 
 	return;
@@ -1167,6 +1189,7 @@ Hy3Node* Hy3Layout::shiftOrGetFocus(Hy3Node& node, ShiftDirection direction, boo
 				Hy3Node::swapData(*break_parent, *newChild);
 				break_parent->data.as_group.children.push_back(newChild);
 				break_parent->data.as_group.lastFocusedChild = newChild;
+				Debug::log(LOG, "* UAF DEBUGGING - Set %p's lastFocusedChild to %p at %s:%d", break_parent, break_parent->data.as_group.lastFocusedChild, __FILE__, __LINE__);
 				break_origin = newChild;
 			}
 
@@ -1259,6 +1282,7 @@ Hy3Node* Hy3Layout::shiftOrGetFocus(Hy3Node& node, ShiftDirection direction, boo
 		// must happen AFTER `insert` is used
 		auto* old_parent = node.removeFromParentRecursive();
 		node.parent = target_group;
+		Debug::log(LOG, "* UAF DEBUGGING - Set %p's parent to %p at %s:%d", &node, node.parent, __FILE__, __LINE__);
 		node.size_ratio = 1.0;
 
 		if (old_parent != nullptr) old_parent->recalcSizePosRecursive();
